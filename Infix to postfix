#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE 100
char stack[MAX_SIZE];
int top = -1;
// Function to push an element onto the stack
void push(char item) {
if (top == MAX_SIZE - 1) {
printf("Stack Overflow\n");
exit(EXIT_FAILURE);
}
stack[++top] = item;
}
// Function to pop an element from the stack
char pop() {
if (top == -1) {
printf("Stack Underflow\n");
exit(EXIT_FAILURE);
}
return stack[top--];
}
// Function to get priority of an operator
int priority(char operator) {
switch (operator) {
case '^':
return 3;
case '*':
case '/':
return 2;
case '+':
case '-':
return 1;
default:
return 0;
}
}
// Function to convert infix expression to postfix expression
void infixToPostfix(char infix[], char postfix[]) {
int i = 0, j = 0;
char ch;
while (infix[i] != '\0') {
ch = infix[i];
if (isalnum(ch)) {
postfix[j++] = ch; // Operand, copy to postfix
} else if (ch == '(') {
push(ch);
} else if (ch == ')') {
while (stack[top] != '(') {
postfix[j++] = pop();
}
pop(); // Discard the '('
} else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
if (top == -1 || stack[top] == '(' || priority(stack[top]) < priority(ch)) {
push(ch);
} else {
while (top != -1 && stack[top] != '(' && priority(stack[top]) >= priority(ch)) {
postfix[j++] = pop();
}
push(ch);
}
} else if (ch == '^') {
if (top == -1 || stack[top] == '(' || priority(stack[top]) < priority(ch)) {
push(ch);
} else {
while (top != -1 && stack[top] != '(' && priority(stack[top]) > priority(ch)) {
postfix[j++] = pop();
}
push(ch);
}
}
i++;
}
// Pop remaining operators from the stack
while (top != -1) {
postfix[j++] = pop();
}
postfix[j] = '\0'; // Null-terminate the postfix expression
}
int main() {
char infix[MAX_SIZE], postfix[MAX_SIZE];
printf("Enter infix expression: ");
scanf("%s", infix);
infixToPostfix(infix, postfix);
printf("Postfix expression: %s\n", postfix);
return 0;
}
